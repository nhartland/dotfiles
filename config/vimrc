" plug autoinstall
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'junegunn/goyo.vim'
Plug 'lervag/vimtex'
Plug 'ConradIrwin/vim-bracketed-paste'
Plug 'neovim/nvim-lspconfig'
call plug#end()

" Switch off search highlighting
set nohlsearch

set nocompatible

" syntax highlights
syntax enable

" Currently need to enable jellybeans first, as it adds sensible SpellCheck
" error formatting. Need to fix this
colorscheme jellybeans
colorscheme Tomorrow-Night-Bright

" Highlight background in insert mode
" https://gist.github.com/igoodrich/5072880
au InsertEnter * hi Normal ctermbg=234 guibg=#000000
au InsertLeave * hi Normal ctermbg=232 guibg=#1b1d1e

" Mapping time-outs, specifically to speed up pressing Esc
set timeoutlen=1000
set ttimeoutlen=10

" disable ex-mode
map q: <Nop>
nnoremap Q <nop>

" tabs
set smartindent
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

" vim-gitgutter
set updatetime=100
let g:gitgutter_terminal_reports_focus=0

" Spelling
" Regenerate spl file if needed
for d in glob('~/.vim/spell/*.add', 1, 1)
    if filereadable(d) && (!filereadable(d . '.spl') || getftime(d) > getftime(d . '.spl'))
        exec 'mkspell! ' . fnameescape(d)
    endif
endfor

" Writing mode
function! Writing()
    setlocal spell spelllang=en_gb
    setlocal wrap linebreak
    setlocal softtabstop=4 tabstop=4 shiftwidth=4
    setlocal textwidth=80 wrapmargin=2
    " Don't count acronyms/ abbreviations as spelling errors.
    syntax match AcronymNoSpell '\<\(\u\|\d\)\{3,}s\?\>' contains=@NoSpell
    " Don't count url-ish things as spelling errors
    syntax match UrlNoSpell '\w\+:\/\/[^[:space:]]\+' contains=@NoSpell
    " highlight double words ("word word")
    syn match doubleWord "\c\<\(\a\+\)\_s\+\1\>"
    hi def link doubleWord Error
endfunction

au BufNewFile,BufFilePre,BufRead *.md set filetype=markdown " Identify .md as markdown
autocmd FileType gitcommit  call Writing()
autocmd FileType markdown   call Writing()
autocmd FileType wiki       call Writing()
autocmd FileType tex        call Writing()

" Automatically erase end of line whitespace in certain file types
autocmd FileType c,cpp,lua,md,tex,python autocmd BufWritePre <buffer> %s/\s\+$//e

" Disable macro recording for now
map q <Nop>

" UI
set number
"set relativenumber
set showcmd
set cursorline
set path+=** " Recursive find searched subdirectories
set wildmenu
set wildmode=list:longest,full
set lazyredraw
set showmatch
set ruler

" Search
set incsearch
"set hlsearch
set ignorecase
set smartcase " Search is case sensitive only when a capital letter is present in the search string

" Backups
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup

" General
"set esckeys
set autowrite
set autoindent " not sure about this one
set autoread
set showcmd
filetype plugin indent on
set undolevels=1000 " max number of undo levels
set visualbell

" Split buffers open to right and below
set splitbelow
set splitright

" move by vertical line
nnoremap j gj
nnoremap k gk

" ale
" let g:ale_linters = {'python': ['flake8'], 'lua': ['luacheck']}
" let g:ale_python_flake8_options = '--max-line-length=88, --ignore=W503'

" disable arrow keys
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

" netrw
let g:netrw_banner = 0
let g:netrw_liststyle = 3
