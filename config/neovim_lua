-- Enable update_in_insert
vim.diagnostic.config({
	update_in_insert = true,
	signs = true,
})


-- Function that sets standard capabilities for LSP
local function on_attach(client, bufnr)
    -- Set up buffer-local keymaps (vim.api.nvim_buf_set_keymap()), etc.
    local opts = { noremap = true, silent = true }
    -- Setup gd to go to declaration/definition
    vim.api.nvim_buf_set_keymap(bufnr, "n", "gD", "<cmd>lua vim.lsp.buf.declaration()<CR>", opts)
    vim.api.nvim_buf_set_keymap(bufnr, "n", "gd", "<cmd>lua vim.lsp.buf.definition()<CR>", opts)


    -- Set up format on save (only if the server supports formatting)
    if client.server_capabilities.documentFormattingProvider then
      vim.api.nvim_create_autocmd("BufWritePre", {
        buffer = bufnr,
        callback = function()
          vim.lsp.buf.format { async = false, id = client.id }
        end,
      })
    end
end

-- CMP
-- Set up nvim-cmp.
local cmp = require'cmp'

cmp.setup({
  snippet = {
    -- REQUIRED - you must specify a snippet engine
    expand = function(args)
      vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
    end,
  },
  window = {
    -- completion = cmp.config.window.bordered(),
    -- documentation = cmp.config.window.bordered(),
  },
  mapping = cmp.mapping.preset.insert({
    ['<C-b>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-e>'] = cmp.mapping.abort(),
    ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
  }),
  sources = cmp.config.sources({
    { name = 'nvim_lsp' },
  }, {
    { name = 'buffer' },
  })
})

-- LSP
require("mason").setup {
    ui = {
        icons = {
            package_installed = "âœ“"
        }
    }
}
require("mason-lspconfig").setup {
    ensure_installed = { "ruff", "basedpyright", "lua_ls" },
}

-- Table of LSP servers with their settings
local servers = {
  ruff = {
    on_attach = on_attach,
    -- ruff settings (if any) can be added here:
    init_options = {
      settings = {
        args = {},
      },
    },
  },
  basedpyright = {
    on_attach = on_attach,
    capabilities = capabilities,
    settings = {
      pyright = {
        -- Using Ruff's import organizer
        disableOrganizeImports = true,
      },
      python = {
        analysis = {
          diagnosticMode = "off",
          typeCheckingMode = "off",
          -- Ignore all files for analysis to exclusively use Ruff for linting
          ignore = { '*' },
        },
      },
    },
  },
  lua_ls = {
    on_attach = on_attach,
    capabilities = capabilities,
  },
}

local lspconfig = require("lspconfig")
for server, config in pairs(servers) do
  lspconfig[server].setup(config)
end

